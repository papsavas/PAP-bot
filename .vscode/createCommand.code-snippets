{
	"command Interface": {
		"scope": "typescript",
		"prefix": "commandInterf",
		"body": [
			"import GenericGuildCommand from \"../GenericGuildCommand\"\n\n",
			"export interface $1 extends GenericGuildCommand {\n\n}"
		],
		"description": "create a command interface boiler-plate code"
	},
	"command Implematation": {
		"scope": "typescript",
		"prefix": "commandImpl",
		"body": [
			"export class ${3:Impl} extends AbstactCommand implements ${4:interface}{\n",
			"protected _id: Snowflake; protected _keyword = ``;\nprotected _guide = ``;\nprotected _usage = ``;\n private constructor() {super()}",
			"static async init(): Promise<$4>{\nconst cmd = new $3();\ncmd._id = await fetchCommandID(this.keyword);\nreturn cmd;\n}",
			"private readonly _aliases = this.addKeywordToAliases\n(\n[],this.keyword\n);",
			"getCommandData(guild_id: Snowflake): ApplicationCommandData {\n}",
			" async interactiveExecute(interaction: CommandInteraction): Promise<any> {\n}",
			"async execute(message: Message, { arg1, commandless2 }: literalCommandType): Promise<any> {\n}",
			"getAliases(): string[] {\n\treturn this._aliases;\n}",
			"addGuildLog(guildID: Snowflake, log: string) {\n\treturn guildMap.get(guildID).addGuildLog(log);\n}",
			"}"
		],
		"description": "creates a commands boiler-plate code"
	}
}