{
	"command Interface": {
		"scope": "typescript",
		"prefix": "commandInterf",
		"body": [
			"import {$2} from \"../$2\"\n\n",
			"export interface $1 extends ${2:interface} {\n\n}"
		],
		"description": "create a command interface boiler-plate code"
	},
	"command Implematation": {
		"scope": "typescript",
		"prefix": "commandImpl",
		"body": [
			"export class ${3:Impl} extends ${5:Abstract__Command} implements ${4:interface}{\n",
			"protected _id: Collection<Snowflake, Snowflake> = new Collection(null);\nprotected _keyword = ``;\nprotected _guide = ``;\nprotected _usage = `${this.keyword}`;\n private constructor() {super()}",
			"static async init(): Promise<$4>{\nconst cmd = new $3();\ncmd._id = await fetchCommandID(cmd.keyword);\nreturn cmd;\n}",
			"readonly #aliases = this.addKeywordToAliases\n(\n[],this.keyword\n);",
			"getCommandData(guild_id: Snowflake): ApplicationCommandData { return {\nname: this.keyword,\ndescription: this.guide,\ntype: 'CHAT_INPUT'\n}\n}",
			"async interactiveExecute(interaction: CommandInteraction): Promise<unknown> {\n\n}",
			"async execute(message: Message, { }: commandLiteral): Promise<unknown> {\n\n}",
			"getAliases(): string[] {\n\treturn this.#aliases;\n}",
			"}"
		],
		"description": "creates a commands boiler-plate code"
	}
}